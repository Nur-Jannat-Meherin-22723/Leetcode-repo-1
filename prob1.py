# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mQIWunptWWU3SKs323FT5f5ucAdVEI8s
"""

class Solution:
  # First we'll declare a solution class
  def twoSum(self, nums: List[int], target: int)->List[int]:
    # then take a integer list of input numbers and an integer which is the target in the array which will return a list of the answered numbers' position
    # nums = [2,7,11,15] , target = 9
    visited={}
    # declare an empty dictionary for the answer list
    numsLen = len(nums)
    # calculate the length of the input list nums
    # numsLen = 4
    for currentIndex in range(numsLen):
      # we'll run a loop from 0 to length of the nums list, currentIndex is the variable of the current Iteration
      # currentIndex from 0 to 3, iteration number = 4
      currentNumber = nums[currentIndex]
      #we'll get first number of the input list nums, then the other numbers in other iterations
      # in first iteration current number = nums[0] = 2
      remainingNumber = target - currentNumber
      # calculate the second number we need to find in the input list nums
      # remaining number = 9-2 = 7
      if remainingNumber in visited:
        # check if we already visited the remaining number in the input list nums
        # visited is empty. so remaining number is not in visited. else will run
        visitedIndex = visited[remainingNumber]
        # visited{2:0, 7,1}
        return [visitedIndex, currentIndex]
        # [0, 1]
      else:
        visited[currentNumber] = currenIndex
        # visited{2: 0}